#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import fnmatch
import datetime
import json
from pathlib import Path
from collections import defaultdict
from dataclasses import dataclass
from typing import List, Optional, Tuple
from abc import ABC, abstractmethod

# –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
try:
    import msvcrt  # Windows
    WINDOWS = True
except ImportError:
    import termios, tty, select  # Unix/Linux/Mac
    WINDOWS = False


@dataclass
class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    interactive: bool = False
    sort_by_time: bool = False
    markdown_format: bool = False
    show_structure: bool = False
    source_dir: Optional[str] = None
    output_file: Optional[str] = None


class TreeNode:
    """–£–∑–µ–ª –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫"""
    def __init__(self, path, is_file=True, parent=None):
        self.path = path
        self.is_file = is_file
        self.parent = parent
        self.children = [] if not is_file else None
        self.selected = False
        self.expanded = not is_file  # –§–∞–π–ª—ã –≤—Å–µ–≥–¥–∞ "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã"
        self.visible = True
        
    def get_selection_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞: 'all', 'none', 'partial'"""
        if self.is_file:
            return 'all' if self.selected else 'none'
        
        if not self.children:
            return 'none'
            
        selected_count = sum(1 for child in self.children 
                           if child.get_selection_state() in ['all', 'partial'])
        
        if selected_count == 0:
            return 'none'
        elif selected_count == len(self.children):
            return 'all'
        else:
            return 'partial'
    
    def set_selected_recursive(self, selected):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        if self.is_file:
            self.selected = selected
        else:
            for child in self.children:
                child.set_selected_recursive(selected)
    
    def get_display_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è"""
        if self.parent is None:
            return str(self.path.name) if self.path.name else str(self.path)
        return self.path.name
    
    def get_file_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
        if self.is_file:
            return 1
        return sum(child.get_file_count() for child in self.children)
    
    def get_selected_files(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if self.is_file:
            return [self.path] if self.selected else []
        
        result = []
        for child in self.children:
            result.extend(child.get_selected_files())
        return result


class ProjectSettings:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, root_path):
        self.root_path = Path(root_path).resolve()
        self.settings_dir = self.root_path / ".codecollector"
        self.project_name = self.root_path.name
        self.settings_file = self.settings_dir / f"{self.project_name}.json"
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        if not self.settings_file.exists():
            return None
            
        try:
            with open(self.settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
            if settings.get('full_path') != str(self.root_path):
                return None
                
            return settings
        except (json.JSONDecodeError, OSError) as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None
    
    def save_settings(self, preferences, selected_files, selected_folders):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.settings_dir.mkdir(exist_ok=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            selected_files_rel = []
            selected_folders_rel = []
            
            for file_path in selected_files:
                try:
                    rel_path = file_path.relative_to(self.root_path)
                    selected_files_rel.append(str(rel_path).replace('\\', '/'))
                except ValueError:
                    continue
            
            for folder_path in selected_folders:
                try:
                    rel_path = folder_path.relative_to(self.root_path)
                    selected_folders_rel.append(str(rel_path).replace('\\', '/'))
                except ValueError:
                    continue
            
            settings = {
                "project_name": self.project_name,
                "full_path": str(self.root_path),
                "last_updated": datetime.datetime.now().isoformat(),
                "preferences": preferences,
                "selected_files": selected_files_rel,
                "selected_folders": selected_folders_rel
            }
            
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
                
            print("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ .gitignore –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            self._update_gitignore()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def _update_gitignore(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç .codecollector –≤ .gitignore –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        gitignore_path = self.root_path / '.gitignore'
        gitignore_entry = '.codecollector/'
        
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .gitignore
            existing_lines = []
            if gitignore_path.exists():
                with open(gitignore_path, 'r', encoding='utf-8') as f:
                    existing_lines = f.read().splitlines()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
            if gitignore_entry not in existing_lines and '.codecollector' not in existing_lines:
                with open(gitignore_path, 'a', encoding='utf-8') as f:
                    if existing_lines and not existing_lines[-1].strip():
                        f.write(f"{gitignore_entry}\n")
                    else:
                        f.write(f"\n{gitignore_entry}\n")
                        
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å .gitignore
    
    def filter_existing_paths(self, selected_files, selected_folders):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        existing_files = []
        existing_folders = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        for rel_path_str in selected_files:
            abs_path = self.root_path / rel_path_str
            if abs_path.exists() and abs_path.is_file():
                existing_files.append(abs_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
        for rel_path_str in selected_folders:
            abs_path = self.root_path / rel_path_str
            if abs_path.exists() and abs_path.is_dir():
                existing_folders.append(abs_path)
        
        return existing_files, existing_folders


class KeyboardHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π)"""
    
    @staticmethod
    def get_key():
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∂–∞—Ç—É—é –∫–ª–∞–≤–∏—à—É –±–µ–∑ Enter"""
        if WINDOWS:
            return KeyboardHandler._get_key_windows()
        else:
            return KeyboardHandler._get_key_unix()
    
    @staticmethod
    def _get_key_windows():
        """Windows-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à"""
        key = msvcrt.getch()
        if key == b'\xe0' or key == b'\x00':  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ (—Å—Ç—Ä–µ–ª–∫–∏)
            key2 = msvcrt.getch()
            if key2 == b'H' or key2 == b'\x48':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
                return 'UP'
            elif key2 == b'P' or key2 == b'\x50':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
                return 'DOWN'
            elif key2 == b'K' or key2 == b'\x4b':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ
                return 'LEFT'
            elif key2 == b'M' or key2 == b'\x4d':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
                return 'RIGHT'
        elif key == b' ':  # –ü—Ä–æ–±–µ–ª
            return 'SPACE'
        elif key == b'\r':  # Enter
            return 'ENTER'
        elif key == b'\x1b':  # Escape
            return 'ESC'
        elif key == b'q' or key == b'Q':
            return 'QUIT'
        elif key == b'a' or key == b'A':
            return 'ALL'
        elif key == b'n' or key == b'N':
            return 'NONE'
        elif key == b'w' or key == b'W':  # W/S –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å—Ç—Ä–µ–ª–∫–∞–º
            return 'UP'
        elif key == b's' or key == b'S':
            return 'DOWN'
        elif key == b'j':  # J/K –∫–∞–∫ –≤ vim
            return 'DOWN'
        elif key == b'k':
            return 'UP'
        elif key == b'f' or key == b'F':
            return 'FIND'
        elif key == b'+' or key == b'=':
            return 'EXPAND'
        elif key == b'-' or key == b'_':
            return 'COLLAPSE'
        return key.decode('utf-8', errors='ignore')
    
    @staticmethod
    def _get_key_unix():
        """Unix/Linux/Mac –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à"""
        old_settings = termios.tcgetattr(sys.stdin)
        try:
            tty.setraw(sys.stdin.fileno())
            key = sys.stdin.read(1)
            
            if key == '\x1b':  # ESC –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                # –ß–∏—Ç–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
                next_chars = ''
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–∏–º–≤–æ–ª—ã (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
                    if select.select([sys.stdin], [], [], 0.1)[0]:
                        next_chars = sys.stdin.read(2)
                except:
                    pass
                
                full_seq = key + next_chars
                
                if full_seq == '\x1b[A':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
                    return 'UP'
                elif full_seq == '\x1b[B':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
                    return 'DOWN'
                elif full_seq == '\x1b[C':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
                    return 'RIGHT'
                elif full_seq == '\x1b[D':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ
                    return 'LEFT'
                elif full_seq == '\x1b[5':  # Page Up
                    try:
                        if select.select([sys.stdin], [], [], 0.1)[0]:
                            sys.stdin.read(1)  # –ß–∏—Ç–∞–µ–º ~
                    except:
                        pass
                    return 'PAGEUP'
                elif full_seq == '\x1b[6':  # Page Down
                    try:
                        if select.select([sys.stdin], [], [], 0.1)[0]:
                            sys.stdin.read(1)  # –ß–∏—Ç–∞–µ–º ~
                    except:
                        pass
                    return 'PAGEDOWN'
                else:
                    return 'ESC'
            elif key == ' ':  # –ü—Ä–æ–±–µ–ª
                return 'SPACE'
            elif key == '\r' or key == '\n':  # Enter
                return 'ENTER'
            elif key == 'q' or key == 'Q':
                return 'QUIT'
            elif key == 'a' or key == 'A':
                return 'ALL'
            elif key == 'n' or key == 'N':
                return 'NONE'
            elif key == 'w' or key == 'W':  # WASD –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                return 'UP'
            elif key == 's' or key == 'S':
                return 'DOWN'
            elif key == 'j':  # Vim-style
                return 'DOWN'
            elif key == 'k':
                return 'UP'
            elif key == 'f' or key == 'F':
                return 'FIND'
            elif key == '+' or key == '=':
                return 'EXPAND'
            elif key == '-' or key == '_':
                return 'COLLAPSE'
            return key
        finally:
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)


class GitignoreHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ .gitignore —Ñ–∞–π–ª–æ–≤"""
    
    @staticmethod
    def parse_gitignore(gitignore_path):
        """–ü–∞—Ä—Å–∏—Ç .gitignore —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        patterns = []
        
        if not gitignore_path.exists():
            return patterns
        
        try:
            with open(gitignore_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    if not line or line.startswith('#'):
                        continue
                    patterns.append(line)
        except Exception as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .gitignore: {e}")
        
        return patterns

    @staticmethod
    def is_ignored_by_gitignore(file_path, root_path, gitignore_patterns):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å–æ–≥–ª–∞—Å–Ω–æ .gitignore"""
        if not gitignore_patterns:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        try:
            rel_path = file_path.relative_to(root_path)
            rel_path_str = str(rel_path).replace('\\', '/')  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è Windows
        except ValueError:
            return False
        
        for pattern in gitignore_patterns:
            # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
            if pattern.startswith('/'):
                pattern = pattern[1:]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if rel_path_str == pattern:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∫–∞–∫ glob
            if fnmatch.fnmatch(rel_path_str, pattern):
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –ø—É—Ç–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç–∏–ø–∞ "node_modules"
            path_parts = rel_path.parts
            for i in range(len(path_parts)):
                partial_path = '/'.join(path_parts[i:])
                if fnmatch.fnmatch(partial_path, pattern):
                    return True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏
                if fnmatch.fnmatch(path_parts[i], pattern):
                    return True
            
            # –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∑–∞–≤–µ—Ä—à–∞—é—â–∏–º —Å–ª–µ—à–µ–º
            if pattern.endswith('/'):
                dir_pattern = pattern[:-1]
                if any(fnmatch.fnmatch(part, dir_pattern) for part in path_parts):
                    return True
        
        return False


class FileFilters:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    
    SKIP_DIRS = {'vendor', 'venv', '.git', '.vscode', '__pycache__', 'node_modules'}
    SKIP_FILES = {'.env', '.gitignore', '.DS_Store'}
    SKIP_EXTENSIONS = {'.pyc', '.pyo', '.log', '.tmp'}
    TEXT_EXTENSIONS = {
        '.py', '.php', '.js', '.html', '.css', '.sql', '.txt', '.md', 
        '.json', '.xml', '.yml', '.yaml', '.ini', '.conf', '.sh', 
        '.bat', '.dockerfile', '.gitignore', '.htaccess', '.vue', 
        '.ts', '.jsx', '.tsx', '.scss', '.less', '.go', '.java', 
        '.c', '.cpp', '.h', '.rb', '.pl', '.rs'
    }
    
    @classmethod
    def should_skip_directory(cls, dir_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        return dir_name in cls.SKIP_DIRS

    @classmethod
    def should_skip_file(cls, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"""
        file_name = file_path.name
        file_ext = file_path.suffix.lower()
        
        return (file_name in cls.SKIP_FILES or 
                file_ext in cls.SKIP_EXTENSIONS or
                file_name.startswith('.env'))

    @classmethod
    def is_text_file(cls, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        if file_path.suffix.lower() in cls.TEXT_EXTENSIONS:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω—Ñ–∏–≥–∏)
        if not file_path.suffix:
            try:
                with open(file_path, 'rb') as f:
                    chunk = f.read(1024)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–ª–µ–≤—ã–µ –±–∞–π—Ç—ã (–ø—Ä–∏–∑–Ω–∞–∫ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
                    return b'\x00' not in chunk
            except:
                return False
        
        return False


class CodeCollector:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, root_path: Path, config: Config):
        self.root_path = root_path.resolve()
        self.config = config
        self.gitignore_patterns = []
        
    def scan_and_collect(self) -> List[Path]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.root_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º .gitignore –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self._load_gitignore_patterns()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
        collected_files = []
        for file_path in self.root_path.rglob('*'):
            if self._should_include_file(file_path):
                collected_files.append(file_path)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(collected_files)}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        if self.config.sort_by_time:
            print("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)...")
            collected_files.sort(key=lambda f: f.stat().st_mtime, reverse=True)
        else:
            print("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞...")
            collected_files.sort()
        
        return collected_files
    
    def _load_gitignore_patterns(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ .gitignore"""
        main_gitignore = self.root_path / '.gitignore'
        self.gitignore_patterns = GitignoreHandler.parse_gitignore(main_gitignore)
        
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ .gitignore: {len(self.gitignore_patterns)}")
        if self.gitignore_patterns:
            print("–ü–∞—Ç—Ç–µ—Ä–Ω—ã:", self.gitignore_patterns[:5], "..." if len(self.gitignore_patterns) > 5 else "")
    
    def _should_include_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if file_path.is_dir():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if GitignoreHandler.is_ignored_by_gitignore(file_path, self.root_path, self.gitignore_patterns):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –∏—Å–∫–ª—é—á–∞–µ–º–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for parent in file_path.parents:
            if FileFilters.should_skip_directory(parent.name):
                return False
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –º–∞—Å–∫–µ
        if FileFilters.should_skip_file(file_path):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π
        if not FileFilters.is_text_file(file_path):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        try:
            if file_path.stat().st_size == 0:
                return False
        except OSError:
            return False
            
        return True


class InteractiveSelector:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ä–µ–≤–æ–º"""
    
    def __init__(self, files: List[Path], root_path: Path, saved_files=None, saved_folders=None):
        self.files = files
        self.root_path = root_path
        self.tree_root = self._build_file_tree()
        self.current_pos = 0
        self.page_size = 18
        self.current_page = 0
        self.search_term = ""
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if saved_files or saved_folders:
            self._apply_saved_selection(saved_files or [], saved_folders or [])
    
    def run(self) -> List[Path]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä"""
        if not self.files:
            print("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
            return []
        
        print("\n–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤...")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        while True:
            self._display_tree()
            key = KeyboardHandler.get_key()
            
            if not self._handle_key(key):
                break
        
        return self.tree_root.get_selected_files()
    
    def _build_file_tree(self) -> TreeNode:
        """–°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π"""
        tree_root = TreeNode(self.root_path, is_file=False)
        tree_root.expanded = True
        
        for file_path in self.files:
            rel_path = file_path.relative_to(self.root_path)
            parts = rel_path.parts
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            current_path = self.root_path
            current_node = tree_root
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º –ø—É—Ç–∏ –∫—Ä–æ–º–µ —Ñ–∞–π–ª–∞
            for i, part in enumerate(parts[:-1]):
                current_path = current_path / part
                
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É —Å—Ä–µ–¥–∏ –¥–µ—Ç–µ–π
                existing_dir = None
                for child in current_node.children:
                    if not child.is_file and child.path.name == part:
                        existing_dir = child
                        break
                
                if existing_dir is None:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
                    dir_node = TreeNode(current_path, is_file=False, parent=current_node)
                    current_node.children.append(dir_node)
                    current_node = dir_node
                else:
                    current_node = existing_dir
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            file_node = TreeNode(file_path, is_file=True, parent=current_node)
            current_node.children.append(file_node)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–π: –ø–∞–ø–∫–∏ —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
        self._sort_tree_children(tree_root)
        return tree_root
    
    def _sort_tree_children(self, node):
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–µ–π —É–∑–ª–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        if not node.is_file:
            node.children.sort(key=lambda x: (x.is_file, x.path.name.lower()))
            for child in node.children:
                self._sort_tree_children(child)
    
    def _apply_saved_selection(self, saved_files, saved_folders):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∫ –¥–µ—Ä–µ–≤—É —Ñ–∞–π–ª–æ–≤"""
        saved_files_set = set(saved_files)
        saved_folders_set = set(saved_folders)
        
        def mark_selected(node):
            if node.is_file:
                if node.path in saved_files_set:
                    node.selected = True
            else:
                if node.path in saved_folders_set:
                    node.set_selected_recursive(True)
                else:
                    for child in node.children:
                        mark_selected(child)
        
        mark_selected(self.tree_root)
    
    def _get_visible_nodes(self) -> List[Tuple[TreeNode, int]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        visible = []
        
        def traverse(node, depth=0):
            if node != self.tree_root:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª
                visible.append((node, depth))
            
            if not node.is_file and node.expanded:
                for child in node.children:
                    traverse(child, depth + 1)
        
        traverse(self.tree_root)
        return visible
    
    def _display_tree(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤"""
        os.system('cls' if os.name == 'nt' else 'clear')
        
        visible_nodes = self._get_visible_nodes()
        
        if not visible_nodes:
            print("–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_files = self.tree_root.get_selected_files()
        total_files = self.tree_root.get_file_count()
        selected_files = len(all_files)
        
        total_pages = (len(visible_nodes) - 1) // self.page_size + 1 if visible_nodes else 1
        start_idx = self.current_page * self.page_size
        end_idx = min(start_idx + self.page_size, len(visible_nodes))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        print("‚ïî" + "‚ïê" * 80 + "‚ïó")
        print("‚ïë" + f"  –í–´–ë–û–† –§–ê–ô–õ–û–í –ò –ü–ê–ü–û–ö ({selected_files}/{total_files} —Ñ–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ)".ljust(78) + "‚ïë")
        print("‚ïë" + f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.current_page + 1}/{total_pages}".ljust(78) + "‚ïë")
        print("‚ï†" + "‚ïê" * 80 + "‚ï£")
        print("‚ïë" + "  ‚Üë‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è, SPACE - –≤—ã–±–æ—Ä, ‚Üí‚Üê - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å".ljust(78) + "‚ïë")
        print("‚ïë" + "  A/N - –≤—Å—ë/–Ω–∏—á–µ–≥–æ, +/- - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ, F - –ø–æ–∏—Å–∫, Q - –≤—ã—Ö–æ–¥".ljust(78) + "‚ïë")
        print("‚ïö" + "‚ïê" * 80 + "‚ïù")
        print()
        
        if self.search_term:
            print(f"üîç –ü–æ–∏—Å–∫: '{self.search_term}' (ESC - –æ—á–∏—Å—Ç–∏—Ç—å)")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∑–ª—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i in range(start_idx, end_idx):
            if i >= len(visible_nodes):
                break
                
            node, depth = visible_nodes[i]
            cursor = "‚Üí" if i == self.current_pos else " "
            indent = "  " * depth
            
            if node.is_file:
                checkbox = "‚òë" if node.selected else "‚òê"
                name = node.get_display_name()
                max_name_len = 50 - len(indent)
                if len(name) > max_name_len:
                    name = name[:max_name_len-3] + "..."
                
                print(f"{cursor} {indent}üìÑ {checkbox} {name}")
            else:
                state = node.get_selection_state()
                if state == 'all':
                    checkbox = "‚òë"
                elif state == 'partial':
                    checkbox = "‚óë"
                else:
                    checkbox = "‚òê"
                
                expand_icon = "‚ñº" if node.expanded else "‚ñ∂"
                file_count = node.get_file_count()
                
                name = node.get_display_name()
                max_name_len = 35 - len(indent)
                if len(name) > max_name_len:
                    name = name[:max_name_len-3] + "..."
                
                print(f"{cursor} {indent}üìÅ {checkbox} {expand_icon} {name}/ ({file_count} —Ñ–∞–π–ª–æ–≤)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–∏–∑—É
        print(f"\n–í—ã–±—Ä–∞–Ω–æ: {selected_files} —Ñ–∞–π–ª–æ–≤")
        if self.current_pos < len(visible_nodes):
            current_node, _ = visible_nodes[self.current_pos]
            rel_path = current_node.path.relative_to(self.root_path)
            print(f"–¢–µ–∫—É—â–∏–π: {rel_path}")
    
    def _handle_key(self, key: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, False –¥–ª—è –≤—ã—Ö–æ–¥–∞"""
        visible_nodes = self._get_visible_nodes()
        total_pages = (len(visible_nodes) - 1) // self.page_size + 1 if visible_nodes else 1
        
        if key == 'UP':
            if self.current_pos > 0:
                self.current_pos -= 1
                if self.current_pos < self.current_page * self.page_size:
                    self.current_page = max(0, self.current_page - 1)
        
        elif key == 'DOWN':
            if self.current_pos < len(visible_nodes) - 1:
                self.current_pos += 1
                if self.current_pos >= (self.current_page + 1) * self.page_size:
                    self.current_page = min(total_pages - 1, self.current_page + 1)
        
        elif key == 'SPACE':
            if self.current_pos < len(visible_nodes):
                current_node, _ = visible_nodes[self.current_pos]
                if current_node.is_file:
                    current_node.selected = not current_node.selected
                else:
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Å—é –ø–∞–ø–∫—É
                    state = current_node.get_selection_state()
                    new_state = state != 'all'
                    current_node.set_selected_recursive(new_state)
        
        elif key == 'RIGHT':
            if self.current_pos < len(visible_nodes):
                current_node, _ = visible_nodes[self.current_pos]
                if not current_node.is_file:
                    current_node.expanded = True
        
        elif key == 'LEFT':
            if self.current_pos < len(visible_nodes):
                current_node, _ = visible_nodes[self.current_pos]
                if not current_node.is_file:
                    current_node.expanded = False
        
        elif key == 'EXPAND':
            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏
            self._expand_all(self.tree_root)
        
        elif key == 'COLLAPSE':
            # –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            self._collapse_all(self.tree_root)
        
        elif key == 'ENTER':
            return False  # –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä
        
        elif key == 'QUIT':
            print("\n–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            self.tree_root.set_selected_recursive(False)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            return False
        
        elif key == 'ESC':
            if self.search_term:
                self.search_term = ""
            else:
                print("\n–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                self.tree_root.set_selected_recursive(False)
                return False
        
        elif key == 'ALL':
            self.tree_root.set_selected_recursive(True)
        
        elif key == 'NONE':
            self.tree_root.set_selected_recursive(False)
        
        elif key == 'FIND':
            print("\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ", end="", flush=True)
            self.search_term = input().strip()
        
        return True  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
    
    def _expand_all(self, node: TreeNode):
        """–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        if not node.is_file:
            node.expanded = True
            for child in node.children:
                self._expand_all(child)
    
    def _collapse_all(self, node: TreeNode, depth: int = 0):
        """–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if not node.is_file:
            node.expanded = depth == 0
            for child in node.children:
                self._collapse_all(child, depth + 1)


class OutputWriter(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    def __init__(self, root_path: Path):
        self.root_path = root_path
    
    @abstractmethod
    def write(self, files: List[Path], output_file: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"""
        pass
    
    def _read_file_content(self, file_path: Path) -> str:
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–æ–∫"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        except UnicodeDecodeError:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
            try:
                with open(file_path, 'r', encoding='cp1251') as f:
                    return f.read()
            except:
                return "[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞]\n"


class MarkdownWriter(OutputWriter):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    def __init__(self, root_path: Path, show_structure: bool = False):
        super().__init__(root_path)
        self.show_structure = show_structure
    
    def write(self, files: List[Path], output_file: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ"""
        with open(output_file, 'w', encoding='utf-8') as out_f:
            self._write_header(out_f, files)
            
            if self.show_structure:
                self._write_structure(out_f, files)
            
            out_f.write("---\n\n")
            out_f.write("## üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤\n\n")
            
            self._write_files(out_f, files)
    
    def _write_header(self, out_f, files: List[Path]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Markdown"""
        project_name = self.root_path.name
        out_f.write(f"# CodeCollector - {project_name}\n\n")
        out_f.write(f"**–°–æ–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** {len(files)}  \n")
        out_f.write(f"**–î–∞—Ç–∞ —Å–±–æ—Ä–∞:** {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}  \n")
        out_f.write(f"**–ü—É—Ç—å:** `{self.root_path}`\n\n")
    
    def _write_structure(self, out_f, files: List[Path]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        out_f.write("## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n")
        structure = self._generate_project_structure(files)
        out_f.write("```\n")
        out_f.write(structure)
        out_f.write("```\n\n")
    
    def _write_files(self, out_f, files: List[Path]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤"""
        for file_path in sorted(files):
            try:
                rel_path = file_path.relative_to(self.root_path)
                out_f.write(f"### `{rel_path}`\n\n")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                lang = self._get_language_for_extension(file_path.suffix.lower())
                out_f.write(f"```{lang}\n")
                
                content = self._read_file_content(file_path)
                out_f.write(content)
                
                out_f.write("\n```\n\n")
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω: {rel_path}")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
                continue
    
    def _get_language_for_extension(self, extension: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞"""
        language_map = {
            '.py': 'python',
            '.php': 'php', 
            '.js': 'javascript',
            '.jsx': 'jsx',
            '.ts': 'typescript',
            '.tsx': 'tsx',
            '.html': 'html',
            '.css': 'css',
            '.scss': 'scss',
            '.sql': 'sql',
            '.json': 'json',
            '.xml': 'xml',
            '.yml': 'yaml',
            '.yaml': 'yaml',
            '.md': 'markdown',
            '.sh': 'bash',
            '.bat': 'batch',
            '.dockerfile': 'dockerfile',
            '.go': 'go',
            '.java': 'java',
            '.c': 'c',
            '.cpp': 'cpp',
            '.rb': 'ruby',
            '.rs': 'rust'
        }
        return language_map.get(extension, '')
    
    def _generate_project_structure(self, files: List[Path]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
        structure = {}
        
        for file_path in files:
            rel_path = file_path.relative_to(self.root_path)
            parts = rel_path.parts
            
            current = structure
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º –ø—É—Ç–∏
            for i, part in enumerate(parts):
                if part not in current:
                    is_file = i == len(parts) - 1
                    current[part] = {
                        '_is_file': is_file,
                        '_path': file_path if is_file else None
                    }
                    if not is_file:
                        current[part]['_children'] = {}
                
                if not current[part]['_is_file']:
                    current = current[part]['_children']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        tree_lines = [f"{self.root_path.name}/"]
        tree_lines.extend(self._build_tree_text(structure))
        
        return "\n".join(tree_lines)
    
    def _build_tree_text(self, node_dict: dict, prefix: str = "", is_last: bool = True) -> List[str]:
        """–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞"""
        result = []
        items = sorted(node_dict.items(), key=lambda x: (x[1]['_is_file'], x[0].lower()))
        
        for i, (name, info) in enumerate(items):
            is_last_item = i == len(items) - 1
            current_prefix = "‚îî‚îÄ‚îÄ " if is_last_item else "‚îú‚îÄ‚îÄ "
            
            if info['_is_file']:
                result.append(f"{prefix}{current_prefix}{name}")
            else:
                result.append(f"{prefix}{current_prefix}{name}/")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–π
                next_prefix = prefix + ("    " if is_last_item else "‚îÇ   ")
                children_text = self._build_tree_text(info['_children'], next_prefix, is_last_item)
                result.extend(children_text)
        
        return result


class TextWriter(OutputWriter):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    def write(self, files: List[Path], output_file: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        with open(output_file, 'w', encoding='utf-8') as out_f:
            for file_path in sorted(files):
                try:
                    rel_path = file_path.relative_to(self.root_path)
                    out_f.write(f"# {rel_path}\n")
                    
                    content = self._read_file_content(file_path)
                    out_f.write(content)
                    out_f.write("\n\n")
                    
                    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω: {rel_path}")
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
                    continue


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    @staticmethod
    def parse_cli_args() -> Config:
        """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        config = Config()
        
        i = 1
        while i < len(sys.argv):
            arg = sys.argv[i]
            
            if arg in ['-i', '--interactive']:
                config.interactive = True
            elif arg in ['-t', '--time', '--sort-time']:
                config.sort_by_time = True
            elif arg in ['--no-time']:
                config.sort_by_time = False
            elif arg in ['-m', '--markdown']:
                config.markdown_format = True
            elif arg in ['--no-markdown']:
                config.markdown_format = False
            elif arg in ['-s', '--structure']:
                config.show_structure = True
            elif arg in ['--no-structure']:
                config.show_structure = False
            elif not arg.startswith('-'):
                # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                if config.source_dir is None:
                    config.source_dir = arg
                elif config.output_file is None:
                    config.output_file = arg
            
            i += 1
        
        return config
    
    @staticmethod
    def merge_with_saved_settings(config: Config, project_settings: ProjectSettings) -> Config:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç CLI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        saved_settings = project_settings.load_settings()
        
        if not saved_settings:
            return config
        
        saved_preferences = saved_settings.get('preferences', {})
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{saved_settings.get('project_name', 'Unknown')}'")
        
        # CLI —Ñ–ª–∞–≥–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        if not any(arg in sys.argv for arg in ['-t', '--time', '--sort-time', '--no-time']):
            config.sort_by_time = saved_preferences.get('sort_by_time', config.sort_by_time)
        
        if not any(arg in sys.argv for arg in ['-m', '--markdown', '--no-markdown']):
            config.markdown_format = saved_preferences.get('markdown_format', config.markdown_format)
        
        if not any(arg in sys.argv for arg in ['-s', '--structure', '--no-structure']):
            config.show_structure = saved_preferences.get('show_structure', config.show_structure)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
        if not config.output_file:
            config.output_file = saved_preferences.get('default_output')
        
        return config
    
    @staticmethod
    def interactive_config_setup(config: Config, saved_settings_exist: bool = False) -> Config:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        if not config.output_file:
            default_ext = ".md" if config.markdown_format else ".txt"
            default_output = f"collected_files{default_ext}"
            
            output_file = input(f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{default_output}'): ").strip()
            config.output_file = output_file if output_file else default_output
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if not config.interactive and '--interactive' not in sys.argv and '-i' not in sys.argv:
            choice = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤? (y/N): ").strip().lower()
            config.interactive = choice in ['y', 'yes', '–¥', '–¥–∞']
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        if not saved_settings_exist:
            if not any(arg in sys.argv for arg in ['-t', '--time', '--sort-time', '--no-time']):
                choice = input("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)? (y/N): ").strip().lower()
                config.sort_by_time = choice in ['y', 'yes', '–¥', '–¥–∞']
            
            if not any(arg in sys.argv for arg in ['-m', '--markdown', '--no-markdown']):
                choice = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown —Ñ–æ—Ä–º–∞—Ç? (y/N): ").strip().lower()
                config.markdown_format = choice in ['y', 'yes', '–¥', '–¥–∞']
                
                if config.markdown_format and not any(arg in sys.argv for arg in ['-s', '--structure', '--no-structure']):
                    choice = input("–í–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞? (y/N): ").strip().lower()
                    config.show_structure = choice in ['y', 'yes', '–¥', '–¥–∞']
        
        return config
    
    @staticmethod
    def show_applied_config(config: Config, from_settings: bool = False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ–Ω—è–µ–º—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        flags = []
        
        if config.sort_by_time:
            flags.append('-t')
        if config.markdown_format:
            flags.append('-m')
        if config.show_structure:
            flags.append('-s')
        
        if flags:
            flag_str = ' '.join(flags)
            source = "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" if from_settings else "CLI –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
            print(f"üìã –ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ —Ñ–ª–∞–≥–∏: {flag_str} ({source})")
        else:
            print("üìã –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")


class CodeCollectorApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.config = None
        self.project_settings = None
        self.collector = None
        
    def run(self) -> int:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            # –ü–∞—Ä—Å–∏–º CLI –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            self.config = ConfigManager.parse_cli_args()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            source_dir = self._get_source_directory()
            source_path = Path(source_dir)
            
            if not self._validate_source_path(source_path):
                return 1
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            self.project_settings = ProjectSettings(source_path)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            saved_settings_exist = self.project_settings.load_settings() is not None
            self.config = ConfigManager.merge_with_saved_settings(self.config, self.project_settings)
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.config = ConfigManager.interactive_config_setup(self.config, saved_settings_exist)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            ConfigManager.show_applied_config(self.config, saved_settings_exist)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
            self.collector = CodeCollector(source_path, self.config)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
            collected_files = self.collector.scan_and_collect()
            
            if not collected_files:
                print("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
                return 0
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.config.interactive:
                selected_files = self._interactive_file_selection(collected_files, source_path)
                if not selected_files:
                    print("–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return 0
                collected_files = selected_files
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self._save_user_preferences(collected_files)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._write_output(collected_files, source_path)
            
            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            format_info = "Markdown" if self.config.markdown_format else "—Ç–µ–∫—Å—Ç–æ–≤–æ–º"
            structure_info = " —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π" if self.config.show_structure else ""
            print(f"\n–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {format_info} —Ñ–æ—Ä–º–∞—Ç–µ{structure_info}: {self.config.output_file}")
            
            return 0
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return 1
    
    def _get_source_directory(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        if self.config.source_dir:
            return self.config.source_dir
        
        source_dir = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π): ").strip()
        return source_dir if source_dir else os.getcwd()
    
    def _validate_source_path(self, source_path: Path) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å"""
        if not source_path.exists():
            print(f"–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {source_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False
        
        if not source_path.is_dir():
            print(f"–û—à–∏–±–∫–∞: {source_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π!")
            return False
        
        return True
    
    def _interactive_file_selection(self, files: List[Path], root_path: Path) -> List[Path]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        saved_files = []
        saved_folders = []
        
        settings = self.project_settings.load_settings()
        if settings:
            saved_files, saved_folders = self.project_settings.filter_existing_paths(
                settings.get('selected_files', []),
                settings.get('selected_folders', [])
            )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        selector = InteractiveSelector(files, root_path, saved_files, saved_folders)
        selected_files = selector.run()
        
        if selected_files:
            print(f"\n–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(selected_files)}")
        
        return selected_files
    
    def _save_user_preferences(self, selected_files: List[Path]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"""
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        selected_folders_paths = []
        
        preferences = {
            'markdown_format': self.config.markdown_format,
            'show_structure': self.config.show_structure,
            'sort_by_time': self.config.sort_by_time,
            'default_output': self.config.output_file
        }
        
        self.project_settings.save_settings(preferences, selected_files, selected_folders_paths)
    
    def _write_output(self, files: List[Path], root_path: Path):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"""
        if self.config.markdown_format:
            writer = MarkdownWriter(root_path, self.config.show_structure)
        else:
            writer = TextWriter(root_path)
        
        writer.write(files, self.config.output_file)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = CodeCollectorApp()
    return app.run()


if __name__ == "__main__":
    sys.exit(main())