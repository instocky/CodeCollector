#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CodeCollector
TreeNode - —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤, ProjectSettings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""

import json
import datetime
from pathlib import Path
from typing import List, Optional


class TreeNode:
    """
    –£–∑–µ–ª –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - path: Path - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É/–ø–∞–ø–∫–µ
    - is_file: bool - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª–æ–º
    - parent: TreeNode - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª
    - children: List[TreeNode] - –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞–ø–æ–∫)
    - selected: bool - –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∑–µ–ª
    - expanded: bool - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –ª–∏ —É–∑–µ–ª (–¥–ª—è –ø–∞–ø–æ–∫)
    - visible: bool - –≤–∏–¥–∏–º –ª–∏ —É–∑–µ–ª
    
    –ú–µ—Ç–æ–¥—ã:
    - get_selection_state() -> str: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'all'/'none'/'partial'
    - set_selected_recursive(selected): –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    - get_display_name() -> str: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    - get_file_count() -> int: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –≤–µ—Ç–∫–µ
    - get_selected_files() -> List[Path]: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    """
    
    def __init__(self, path, is_file=True, parent=None):
        self.path = path
        self.is_file = is_file
        self.parent = parent
        self.children = [] if not is_file else None
        self.selected = False
        self.expanded = not is_file  # –§–∞–π–ª—ã –≤—Å–µ–≥–¥–∞ "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã"
        self.visible = True
        
    def get_selection_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞: 'all', 'none', 'partial'"""
        if self.is_file:
            return 'all' if self.selected else 'none'
        
        if not self.children:
            return 'none'
            
        selected_count = sum(1 for child in self.children 
                           if child.get_selection_state() in ['all', 'partial'])
        
        if selected_count == 0:
            return 'none'
        elif selected_count == len(self.children):
            return 'all'
        else:
            return 'partial'
    
    def set_selected_recursive(self, selected):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        if self.is_file:
            self.selected = selected
        else:
            for child in self.children:
                child.set_selected_recursive(selected)
    
    def get_display_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è"""
        if self.parent is None:
            return str(self.path.name) if self.path.name else str(self.path)
        return self.path.name
    
    def get_file_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
        if self.is_file:
            return 1
        return sum(child.get_file_count() for child in self.children)
    
    def get_selected_files(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if self.is_file:
            return [self.path] if self.selected else []
        
        result = []
        for child in self.children:
            result.extend(child.get_selected_files())
        return result


class ProjectSettings:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .codecollector/–ø—Ä–æ–µ–∫—Ç.json
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - root_path: Path - –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
    - settings_dir: Path - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (.codecollector)
    - project_name: str - –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
    - settings_file: Path - —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    –ú–µ—Ç–æ–¥—ã:
    - load_settings() -> Optional[dict]: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    - save_settings(preferences, selected_files, selected_folders): –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    - filter_existing_paths(files, folders) -> Tuple: –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏
    - _update_gitignore(): –î–æ–±–∞–≤–ª—è–µ—Ç .codecollector –≤ .gitignore
    """
    
    def __init__(self, root_path):
        self.root_path = Path(root_path).resolve()
        self.settings_dir = self.root_path / ".codecollector"
        self.project_name = self.root_path.name
        self.settings_file = self.settings_dir / f"{self.project_name}.json"
        
    def load_settings(self) -> Optional[dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        if not self.settings_file.exists():
            return None
            
        try:
            with open(self.settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
            if settings.get('full_path') != str(self.root_path):
                return None
                
            return settings
        except (json.JSONDecodeError, OSError) as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None
    
    def save_settings(self, preferences: dict, selected_files: List[Path], selected_folders: List[Path]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.settings_dir.mkdir(exist_ok=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            selected_files_rel = []
            selected_folders_rel = []
            
            for file_path in selected_files:
                try:
                    rel_path = file_path.relative_to(self.root_path)
                    selected_files_rel.append(str(rel_path).replace('\\', '/'))
                except ValueError:
                    continue
            
            for folder_path in selected_folders:
                try:
                    rel_path = folder_path.relative_to(self.root_path)
                    selected_folders_rel.append(str(rel_path).replace('\\', '/'))
                except ValueError:
                    continue
            
            settings = {
                "project_name": self.project_name,
                "full_path": str(self.root_path),
                "last_updated": datetime.datetime.now().isoformat(),
                "preferences": preferences,
                "selected_files": selected_files_rel,
                "selected_folders": selected_folders_rel
            }
            
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
                
            print("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ .gitignore –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            self._update_gitignore()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def _update_gitignore(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç .codecollector –≤ .gitignore –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        gitignore_path = self.root_path / '.gitignore'
        gitignore_entry = '.codecollector/'
        
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .gitignore
            existing_lines = []
            if gitignore_path.exists():
                with open(gitignore_path, 'r', encoding='utf-8') as f:
                    existing_lines = f.read().splitlines()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
            if gitignore_entry not in existing_lines and '.codecollector' not in existing_lines:
                with open(gitignore_path, 'a', encoding='utf-8') as f:
                    if existing_lines and not existing_lines[-1].strip():
                        f.write(f"{gitignore_entry}\n")
                    else:
                        f.write(f"\n{gitignore_entry}\n")
                        
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å .gitignore
    
    def filter_existing_paths(self, selected_files: List[str], selected_folders: List[str]) -> tuple:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        existing_files = []
        existing_folders = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        for rel_path_str in selected_files:
            abs_path = self.root_path / rel_path_str
            if abs_path.exists() and abs_path.is_file():
                existing_files.append(abs_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
        for rel_path_str in selected_folders:
            abs_path = self.root_path / rel_path_str
            if abs_path.exists() and abs_path.is_dir():
                existing_folders.append(abs_path)
        
        return existing_files, existing_folders