#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import fnmatch
import datetime
import json
from pathlib import Path
from collections import defaultdict

# –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
try:
    import msvcrt  # Windows
    WINDOWS = True
except ImportError:
    import termios, tty, select  # Unix/Linux/Mac
    WINDOWS = False

class TreeNode:
    """–£–∑–µ–ª –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫"""
    def __init__(self, path, is_file=True, parent=None):
        self.path = path
        self.is_file = is_file
        self.parent = parent
        self.children = [] if not is_file else None
        self.selected = False
        self.expanded = not is_file  # –§–∞–π–ª—ã –≤—Å–µ–≥–¥–∞ "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã"
        self.visible = True
        
    def get_selection_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞: 'all', 'none', 'partial'"""
        if self.is_file:
            return 'all' if self.selected else 'none'
        
        if not self.children:
            return 'none'
            
        selected_count = sum(1 for child in self.children 
                           if child.get_selection_state() in ['all', 'partial'])
        
        if selected_count == 0:
            return 'none'
        elif selected_count == len(self.children):
            return 'all'
        else:
            return 'partial'
    
    def set_selected_recursive(self, selected):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        if self.is_file:
            self.selected = selected
        else:
            for child in self.children:
                child.set_selected_recursive(selected)
    
    def get_display_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è"""
        if self.parent is None:
            return str(self.path.name) if self.path.name else str(self.path)
        return self.path.name
    
    def get_file_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
        if self.is_file:
            return 1
        return sum(child.get_file_count() for child in self.children)
    
    def get_selected_files(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if self.is_file:
            return [self.path] if self.selected else []
        
        result = []
        for child in self.children:
            result.extend(child.get_selected_files())
        return result

class ProjectSettings:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, root_path):
        self.root_path = Path(root_path).resolve()
        self.settings_dir = self.root_path / ".codecollector"
        self.project_name = self.root_path.name
        self.settings_file = self.settings_dir / f"{self.project_name}.json"
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        if not self.settings_file.exists():
            return None
            
        try:
            with open(self.settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
            if settings.get('full_path') != str(self.root_path):
                return None
                
            return settings
        except (json.JSONDecodeError, OSError) as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None
    
    def save_settings(self, preferences, selected_files, selected_folders):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.settings_dir.mkdir(exist_ok=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            selected_files_rel = []
            selected_folders_rel = []
            
            for file_path in selected_files:
                try:
                    rel_path = file_path.relative_to(self.root_path)
                    selected_files_rel.append(str(rel_path).replace('\\', '/'))
                except ValueError:
                    continue
            
            for folder_path in selected_folders:
                try:
                    rel_path = folder_path.relative_to(self.root_path)
                    selected_folders_rel.append(str(rel_path).replace('\\', '/'))
                except ValueError:
                    continue
            
            settings = {
                "project_name": self.project_name,
                "full_path": str(self.root_path),
                "last_updated": datetime.datetime.now().isoformat(),
                "preferences": preferences,
                "selected_files": selected_files_rel,
                "selected_folders": selected_folders_rel
            }
            
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
                
            print("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ .gitignore –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            self._update_gitignore()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def _update_gitignore(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç .codecollector –≤ .gitignore –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        gitignore_path = self.root_path / '.gitignore'
        gitignore_entry = '.codecollector/'
        
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .gitignore
            existing_lines = []
            if gitignore_path.exists():
                with open(gitignore_path, 'r', encoding='utf-8') as f:
                    existing_lines = f.read().splitlines()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
            if gitignore_entry not in existing_lines and '.codecollector' not in existing_lines:
                with open(gitignore_path, 'a', encoding='utf-8') as f:
                    if existing_lines and not existing_lines[-1].strip():
                        f.write(f"{gitignore_entry}\n")
                    else:
                        f.write(f"\n{gitignore_entry}\n")
                        
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å .gitignore
    
    def filter_existing_paths(self, selected_files, selected_folders):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        existing_files = []
        existing_folders = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        for rel_path_str in selected_files:
            abs_path = self.root_path / rel_path_str
            if abs_path.exists() and abs_path.is_file():
                existing_files.append(abs_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
        for rel_path_str in selected_folders:
            abs_path = self.root_path / rel_path_str
            if abs_path.exists() and abs_path.is_dir():
                existing_folders.append(abs_path)
        
        return existing_files, existing_folders

def get_key():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∂–∞—Ç—É—é –∫–ª–∞–≤–∏—à—É –±–µ–∑ Enter (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ)"""
    if WINDOWS:
        # Windows
        key = msvcrt.getch()
        if key == b'\xe0' or key == b'\x00':  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ (—Å—Ç—Ä–µ–ª–∫–∏)
            key2 = msvcrt.getch()
            if key2 == b'H' or key2 == b'\x48':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
                return 'UP'
            elif key2 == b'P' or key2 == b'\x50':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
                return 'DOWN'
            elif key2 == b'K' or key2 == b'\x4b':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ
                return 'LEFT'
            elif key2 == b'M' or key2 == b'\x4d':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
                return 'RIGHT'
        elif key == b' ':  # –ü—Ä–æ–±–µ–ª
            return 'SPACE'
        elif key == b'\r':  # Enter
            return 'ENTER'
        elif key == b'\x1b':  # Escape
            return 'ESC'
        elif key == b'q' or key == b'Q':
            return 'QUIT'
        elif key == b'a' or key == b'A':
            return 'ALL'
        elif key == b'n' or key == b'N':
            return 'NONE'
        elif key == b'w' or key == b'W':  # W/S –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å—Ç—Ä–µ–ª–∫–∞–º
            return 'UP'
        elif key == b's' or key == b'S':
            return 'DOWN'
        elif key == b'j':  # J/K –∫–∞–∫ –≤ vim
            return 'DOWN'
        elif key == b'k':
            return 'UP'
        elif key == b'f' or key == b'F':
            return 'FIND'
        elif key == b'+' or key == b'=':
            return 'EXPAND'
        elif key == b'-' or key == b'_':
            return 'COLLAPSE'
        return key.decode('utf-8', errors='ignore')
    else:
        # Unix/Linux/Mac
        old_settings = termios.tcgetattr(sys.stdin)
        try:
            tty.setraw(sys.stdin.fileno())
            key = sys.stdin.read(1)
            
            if key == '\x1b':  # ESC –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                # –ß–∏—Ç–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
                next_chars = ''
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–∏–º–≤–æ–ª—ã (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
                    if select.select([sys.stdin], [], [], 0.1)[0]:
                        next_chars = sys.stdin.read(2)
                except:
                    pass
                
                full_seq = key + next_chars
                
                if full_seq == '\x1b[A':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
                    return 'UP'
                elif full_seq == '\x1b[B':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
                    return 'DOWN'
                elif full_seq == '\x1b[C':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
                    return 'RIGHT'
                elif full_seq == '\x1b[D':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ
                    return 'LEFT'
                elif full_seq == '\x1b[5':  # Page Up (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –µ—â–µ —Å–∏–º–≤–æ–ª)
                    try:
                        if select.select([sys.stdin], [], [], 0.1)[0]:
                            sys.stdin.read(1)  # –ß–∏—Ç–∞–µ–º ~
                    except:
                        pass
                    return 'PAGEUP'
                elif full_seq == '\x1b[6':  # Page Down
                    try:
                        if select.select([sys.stdin], [], [], 0.1)[0]:
                            sys.stdin.read(1)  # –ß–∏—Ç–∞–µ–º ~
                    except:
                        pass
                    return 'PAGEDOWN'
                else:
                    return 'ESC'
            elif key == ' ':  # –ü—Ä–æ–±–µ–ª
                return 'SPACE'
            elif key == '\r' or key == '\n':  # Enter
                return 'ENTER'
            elif key == 'q' or key == 'Q':
                return 'QUIT'
            elif key == 'a' or key == 'A':
                return 'ALL'
            elif key == 'n' or key == 'N':
                return 'NONE'
            elif key == 'w' or key == 'W':  # WASD –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                return 'UP'
            elif key == 's' or key == 'S':
                return 'DOWN'
            elif key == 'j':  # Vim-style
                return 'DOWN'
            elif key == 'k':
                return 'UP'
            elif key == 'f' or key == 'F':
                return 'FIND'
            elif key == '+' or key == '=':
                return 'EXPAND'
            elif key == '-' or key == '_':
                return 'COLLAPSE'
            return key
        finally:
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)

def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω"""
    os.system('cls' if os.name == 'nt' else 'clear')

def build_file_tree(files, root_path):
    """–°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π"""
    tree_root = TreeNode(root_path, is_file=False)
    tree_root.expanded = True
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    dir_structure = defaultdict(list)
    
    for file_path in files:
        rel_path = file_path.relative_to(root_path)
        parts = rel_path.parts
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        current_path = root_path
        current_node = tree_root
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º –ø—É—Ç–∏ –∫—Ä–æ–º–µ —Ñ–∞–π–ª–∞
        for i, part in enumerate(parts[:-1]):
            current_path = current_path / part
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É —Å—Ä–µ–¥–∏ –¥–µ—Ç–µ–π
            existing_dir = None
            for child in current_node.children:
                if not child.is_file and child.path.name == part:
                    existing_dir = child
                    break
            
            if existing_dir is None:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
                dir_node = TreeNode(current_path, is_file=False, parent=current_node)
                current_node.children.append(dir_node)
                current_node = dir_node
            else:
                current_node = existing_dir
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file_node = TreeNode(file_path, is_file=True, parent=current_node)
        current_node.children.append(file_node)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–π: –ø–∞–ø–∫–∏ —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
    def sort_children(node):
        if not node.is_file:
            node.children.sort(key=lambda x: (x.is_file, x.path.name.lower()))
            for child in node.children:
                sort_children(child)
    
    sort_children(tree_root)
    return tree_root

def apply_saved_selection(tree_root, saved_files, saved_folders, root_path):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∫ –¥–µ—Ä–µ–≤—É —Ñ–∞–π–ª–æ–≤"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    saved_files_set = set(saved_files)
    saved_folders_set = set(saved_folders)
    
    def mark_selected(node):
        if node.is_file:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
            if node.path in saved_files_set:
                node.selected = True
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É
            if node.path in saved_folders_set:
                node.set_selected_recursive(True)
            else:
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π
                for child in node.children:
                    mark_selected(child)
    
    mark_selected(tree_root)

def get_visible_nodes(tree_root):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    visible = []
    
    def traverse(node, depth=0):
        if node != tree_root:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª
            visible.append((node, depth))
        
        if not node.is_file and node.expanded:
            for child in node.children:
                traverse(child, depth + 1)
    
    traverse(tree_root)
    return visible

def interactive_tree_selector(files, root_path, sort_by_time=False, saved_files=None, saved_folders=None):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–º –¥–µ—Ä–µ–≤–æ–º"""
    if not files:
        print("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if sort_by_time:
        files.sort(key=lambda f: f.stat().st_mtime, reverse=True)
    else:
        files.sort()
    
    # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
    tree_root = build_file_tree(files, root_path)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if saved_files or saved_folders:
        apply_saved_selection(tree_root, saved_files or [], saved_folders or [], root_path)
    
    current_pos = 0
    page_size = 18
    current_page = 0
    search_term = ""
    
    while True:
        clear_screen()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∏–º—ã–µ —É–∑–ª—ã
        visible_nodes = get_visible_nodes(tree_root)
        
        if not visible_nodes:
            print("–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")
            continue
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_files = tree_root.get_selected_files()
        total_files = tree_root.get_file_count()
        selected_files = len(all_files)
        
        total_pages = (len(visible_nodes) - 1) // page_size + 1 if visible_nodes else 1
        start_idx = current_page * page_size
        end_idx = min(start_idx + page_size, len(visible_nodes))
        
        sort_info = "–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ ‚Üë)" if sort_by_time else "–ø–æ –∏–º–µ–Ω–∏"
        
        print("‚ïî" + "‚ïê" * 80 + "‚ïó")
        print("‚ïë" + f"  –í–´–ë–û–† –§–ê–ô–õ–û–í –ò –ü–ê–ü–û–ö ({selected_files}/{total_files} —Ñ–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ)".ljust(78) + "‚ïë")
        print("‚ïë" + f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages} | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_info}".ljust(78) + "‚ïë")
        print("‚ï†" + "‚ïê" * 80 + "‚ï£")
        print("‚ïë" + "  ‚Üë‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è, SPACE - –≤—ã–±–æ—Ä, ‚Üí‚Üê - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å".ljust(78) + "‚ïë")
        print("‚ïë" + "  A/N - –≤—Å—ë/–Ω–∏—á–µ–≥–æ, +/- - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ, F - –ø–æ–∏—Å–∫, Q - –≤—ã—Ö–æ–¥".ljust(78) + "‚ïë")
        print("‚ïö" + "‚ïê" * 80 + "‚ïù")
        print()
        
        if search_term:
            print(f"üîç –ü–æ–∏—Å–∫: '{search_term}' (ESC - –æ—á–∏—Å—Ç–∏—Ç—å)")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∑–ª—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i in range(start_idx, end_idx):
            if i >= len(visible_nodes):
                break
                
            node, depth = visible_nodes[i]
            cursor = "‚Üí" if i == current_pos else " "
            
            # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            indent = "  " * depth
            
            if node.is_file:
                # –§–∞–π–ª
                checkbox = "‚òë" if node.selected else "‚òê"
                icon = "üìÑ"
                
                # –í—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                time_info = ""
                if sort_by_time:
                    try:
                        mtime = node.path.stat().st_mtime
                        import datetime
                        dt = datetime.datetime.fromtimestamp(mtime)
                        time_info = f" [{dt.strftime('%d.%m %H:%M')}]"
                    except:
                        time_info = " [??]"
                
                name = node.get_display_name()
                max_name_len = 50 - len(indent) - (12 if sort_by_time else 0)
                if len(name) > max_name_len:
                    name = name[:max_name_len-3] + "..."
                
                print(f"{cursor} {indent}üìÑ {checkbox} {name}{time_info}")
            else:
                # –ü–∞–ø–∫–∞
                state = node.get_selection_state()
                if state == 'all':
                    checkbox = "‚òë"
                elif state == 'partial':
                    checkbox = "‚óë"
                else:
                    checkbox = "‚òê"
                
                expand_icon = "‚ñº" if node.expanded else "‚ñ∂"
                file_count = node.get_file_count()
                
                name = node.get_display_name()
                max_name_len = 35 - len(indent)
                if len(name) > max_name_len:
                    name = name[:max_name_len-3] + "..."
                
                print(f"{cursor} {indent}üìÅ {checkbox} {expand_icon} {name}/ ({file_count} —Ñ–∞–π–ª–æ–≤)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–∏–∑—É
        print(f"\n–í—ã–±—Ä–∞–Ω–æ: {selected_files} —Ñ–∞–π–ª–æ–≤")
        if current_pos < len(visible_nodes):
            current_node, _ = visible_nodes[current_pos]
            rel_path = current_node.path.relative_to(root_path)
            print(f"–¢–µ–∫—É—â–∏–π: {rel_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        key = get_key()
        
        if key == 'UP':
            if current_pos > 0:
                current_pos -= 1
                if current_pos < current_page * page_size:
                    current_page = max(0, current_page - 1)
        
        elif key == 'DOWN':
            if current_pos < len(visible_nodes) - 1:
                current_pos += 1
                if current_pos >= (current_page + 1) * page_size:
                    current_page = min(total_pages - 1, current_page + 1)
        
        elif key == 'SPACE':
            if current_pos < len(visible_nodes):
                current_node, _ = visible_nodes[current_pos]
                if current_node.is_file:
                    current_node.selected = not current_node.selected
                else:
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Å—é –ø–∞–ø–∫—É
                    state = current_node.get_selection_state()
                    new_state = state != 'all'
                    current_node.set_selected_recursive(new_state)
        
        elif key == 'RIGHT':
            if current_pos < len(visible_nodes):
                current_node, _ = visible_nodes[current_pos]
                if not current_node.is_file:
                    current_node.expanded = True
        
        elif key == 'LEFT':
            if current_pos < len(visible_nodes):
                current_node, _ = visible_nodes[current_pos]
                if not current_node.is_file:
                    current_node.expanded = False
        
        elif key == 'EXPAND':
            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏
            def expand_all(node):
                if not node.is_file:
                    node.expanded = True
                    for child in node.children:
                        expand_all(child)
            expand_all(tree_root)
        
        elif key == 'COLLAPSE':
            # –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            def collapse_all(node, depth=0):
                if not node.is_file:
                    node.expanded = depth == 0
                    for child in node.children:
                        collapse_all(child, depth + 1)
            collapse_all(tree_root)
        
        elif key == 'ENTER':
            break
        
        elif key == 'QUIT' or key == 'ESC':
            if search_term:
                search_term = ""
            else:
                print("\n–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                return []
        
        elif key == 'ALL':
            tree_root.set_selected_recursive(True)
        
        elif key == 'NONE':
            tree_root.set_selected_recursive(False)
        
        elif key == 'FIND':
            print("\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ", end="", flush=True)
            search_term = input().strip()
    
    return tree_root.get_selected_files()

def parse_gitignore(gitignore_path):
    """–ü–∞—Ä—Å–∏—Ç .gitignore —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    patterns = []
    
    if not gitignore_path.exists():
        return patterns
    
    try:
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if not line or line.startswith('#'):
                    continue
                patterns.append(line)
    except Exception as e:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .gitignore: {e}")
    
    return patterns

def is_ignored_by_gitignore(file_path, root_path, gitignore_patterns):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å–æ–≥–ª–∞—Å–Ω–æ .gitignore"""
    if not gitignore_patterns:
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    try:
        rel_path = file_path.relative_to(root_path)
        rel_path_str = str(rel_path).replace('\\', '/')  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è Windows
    except ValueError:
        return False
    
    for pattern in gitignore_patterns:
        # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
        if pattern.startswith('/'):
            pattern = pattern[1:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if rel_path_str == pattern:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∫–∞–∫ glob
        if fnmatch.fnmatch(rel_path_str, pattern):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –ø—É—Ç–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç–∏–ø–∞ "node_modules"
        path_parts = rel_path.parts
        for i in range(len(path_parts)):
            partial_path = '/'.join(path_parts[i:])
            if fnmatch.fnmatch(partial_path, pattern):
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏
            if fnmatch.fnmatch(path_parts[i], pattern):
                return True
        
        # –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∑–∞–≤–µ—Ä—à–∞—é—â–∏–º —Å–ª–µ—à–µ–º
        if pattern.endswith('/'):
            dir_pattern = pattern[:-1]
            if any(fnmatch.fnmatch(part, dir_pattern) for part in path_parts):
                return True
    
    return False

def should_skip_directory(dir_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
    skip_dirs = {'vendor', 'venv', '.git', '.vscode', '__pycache__', 'node_modules'}
    return dir_name in skip_dirs

def should_skip_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"""
    skip_files = {'.env', '.gitignore', '.DS_Store'}
    skip_extensions = {'.pyc', '.pyo', '.log', '.tmp'}
    
    file_name = file_path.name
    file_ext = file_path.suffix.lower()
    
    return (file_name in skip_files or 
            file_ext in skip_extensions or
            file_name.startswith('.env'))

def is_text_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º"""
    text_extensions = {
        '.py', '.php', '.js', '.html', '.css', '.sql', '.txt', '.md', 
        '.json', '.xml', '.yml', '.yaml', '.ini', '.conf', '.sh', 
        '.bat', '.dockerfile', '.gitignore', '.htaccess', '.vue', 
        '.ts', '.jsx', '.tsx', '.scss', '.less', '.go', '.java', 
        '.c', '.cpp', '.h', '.rb', '.pl', '.rs'
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    if file_path.suffix.lower() in text_extensions:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω—Ñ–∏–≥–∏)
    if not file_path.suffix:
        try:
            with open(file_path, 'rb') as f:
                chunk = f.read(1024)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–ª–µ–≤—ã–µ –±–∞–π—Ç—ã (–ø—Ä–∏–∑–Ω–∞–∫ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
                return b'\x00' not in chunk
        except:
            return False
    
    return False

def collect_files(root_dir, output_file, interactive=False, sort_by_time=False, markdown_format=False, show_structure=False, project_settings=None):
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    root_path = Path(root_dir).resolve()
    collected_files = []
    
    print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {root_path}")
    
    # –ß–∏—Ç–∞–µ–º .gitignore —Ñ–∞–π–ª—ã
    gitignore_patterns = []
    
    # –û—Å–Ω–æ–≤–Ω–æ–π .gitignore –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    main_gitignore = root_path / '.gitignore'
    gitignore_patterns.extend(parse_gitignore(main_gitignore))
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É .gitignore –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö, –Ω–æ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–æ–π
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ .gitignore: {len(gitignore_patterns)}")
    if gitignore_patterns:
        print("–ü–∞—Ç—Ç–µ—Ä–Ω—ã:", gitignore_patterns[:5], "..." if len(gitignore_patterns) > 5 else "")
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã
    for file_path in root_path.rglob('*'):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if file_path.is_dir():
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if is_ignored_by_gitignore(file_path, root_path, gitignore_patterns):
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –∏—Å–∫–ª—é—á–∞–µ–º–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        skip_dir = False
        for parent in file_path.parents:
            if should_skip_directory(parent.name):
                skip_dir = True
                break
        
        if skip_dir:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –º–∞—Å–∫–µ
        if should_skip_file(file_path):
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π
        if not is_text_file(file_path):
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        try:
            if file_path.stat().st_size == 0:
                continue
        except OSError:
            continue
            
        collected_files.append(file_path)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(collected_files)}")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
    if sort_by_time:
        print("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)...")
        collected_files.sort(key=lambda f: f.stat().st_mtime, reverse=True)
    else:
        print("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞...")
        collected_files.sort()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    saved_files = []
    saved_folders = []
    if project_settings:
        settings = project_settings.load_settings()
        if settings:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏
            saved_files, saved_folders = project_settings.filter_existing_paths(
                settings.get('selected_files', []),
                settings.get('selected_folders', [])
            )
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if interactive and collected_files:
        print("\n–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤...")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        selected_files = interactive_tree_selector(
            collected_files, root_path, sort_by_time, saved_files, saved_folders
        )
        if not selected_files:
            print("–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        collected_files = selected_files
        print(f"\n–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(collected_files)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if project_settings:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ (–ø–∞–ø–∫–∏ –≥–¥–µ –≤—ã–±—Ä–∞–Ω—ã –í–°–ï —Ñ–∞–π–ª—ã)
            selected_folders_paths = []
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
            # –≠—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            
            preferences = {
                'markdown_format': markdown_format,
                'show_structure': show_structure,
                'sort_by_time': sort_by_time,
                'default_output': output_file
            }
            
            project_settings.save_settings(preferences, collected_files, selected_folders_paths)
    
    if not collected_files:
        print("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    write_output_file(collected_files, root_path, output_file, markdown_format, show_structure)

def write_output_file(files, root_path, output_file, markdown_format=False, show_structure=False):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    with open(output_file, 'w', encoding='utf-8') as out_f:
        if markdown_format:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è markdown
            project_name = root_path.name
            out_f.write(f"# CodeCollector - {project_name}\n\n")
            out_f.write(f"**–°–æ–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** {len(files)}  \n")
            out_f.write(f"**–î–∞—Ç–∞ —Å–±–æ—Ä–∞:** {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}  \n")
            out_f.write(f"**–ü—É—Ç—å:** `{root_path}`\n\n")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if show_structure:
                out_f.write("## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n")
                structure = generate_project_structure(files, root_path)
                out_f.write("```\n")
                out_f.write(structure)
                out_f.write("```\n\n")
            
            out_f.write("---\n\n")
            out_f.write("## üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤\n\n")
        
        for file_path in sorted(files):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                rel_path = file_path.relative_to(root_path)
                
                if markdown_format:
                    # Markdown —Ñ–æ—Ä–º–∞—Ç
                    out_f.write(f"### `{rel_path}`\n\n")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                    extension = file_path.suffix.lower()
                    language_map = {
                        '.py': 'python',
                        '.php': 'php', 
                        '.js': 'javascript',
                        '.jsx': 'jsx',
                        '.ts': 'typescript',
                        '.tsx': 'tsx',
                        '.html': 'html',
                        '.css': 'css',
                        '.scss': 'scss',
                        '.sql': 'sql',
                        '.json': 'json',
                        '.xml': 'xml',
                        '.yml': 'yaml',
                        '.yaml': 'yaml',
                        '.md': 'markdown',
                        '.sh': 'bash',
                        '.bat': 'batch',
                        '.dockerfile': 'dockerfile',
                        '.go': 'go',
                        '.java': 'java',
                        '.c': 'c',
                        '.cpp': 'cpp',
                        '.rb': 'ruby',
                        '.rs': 'rust'
                    }
                    
                    lang = language_map.get(extension, '')
                    out_f.write(f"```{lang}\n")
                else:
                    # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                    out_f.write(f"# {rel_path}\n")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                try:
                    with open(file_path, 'r', encoding='utf-8') as in_f:
                        content = in_f.read()
                        out_f.write(content)
                except UnicodeDecodeError:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
                    try:
                        with open(file_path, 'r', encoding='cp1251') as in_f:
                            content = in_f.read()
                            out_f.write(content)
                    except:
                        error_msg = "[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞]"
                        out_f.write(error_msg + "\n")
                
                if markdown_format:
                    out_f.write("\n```\n\n")
                else:
                    out_f.write("\n\n")
                
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω: {rel_path}")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
                continue

def generate_project_structure(files, root_path):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
    structure = {}
    
    for file_path in files:
        rel_path = file_path.relative_to(root_path)
        parts = rel_path.parts
        
        current = structure
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º –ø—É—Ç–∏
        for i, part in enumerate(parts):
            if part not in current:
                is_file = i == len(parts) - 1
                current[part] = {
                    '_is_file': is_file,
                    '_path': file_path if is_file else None
                }
                if not is_file:
                    current[part]['_children'] = {}
            
            if not current[part]['_is_file']:
                current = current[part]['_children']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    def build_tree_text(node_dict, prefix="", is_last=True):
        result = []
        items = sorted(node_dict.items(), key=lambda x: (x[1]['_is_file'], x[0].lower()))
        
        for i, (name, info) in enumerate(items):
            is_last_item = i == len(items) - 1
            current_prefix = "‚îî‚îÄ‚îÄ " if is_last_item else "‚îú‚îÄ‚îÄ "
            
            if info['_is_file']:
                result.append(f"{prefix}{current_prefix}{name}")
            else:
                result.append(f"{prefix}{current_prefix}{name}/")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–π
                next_prefix = prefix + ("    " if is_last_item else "‚îÇ   ")
                children_text = build_tree_text(info['_children'], next_prefix, is_last_item)
                result.extend(children_text)
        
        return result
    
    tree_lines = [f"{root_path.name}/"]
    tree_lines.extend(build_tree_text(structure['_children'] if '_children' in structure else structure))
    
    return "\n".join(tree_lines)

def parse_arguments():
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤"""
    args = {
        'interactive': False,
        'sort_by_time': False,
        'markdown_format': False,
        'show_structure': False,
        'source_dir': None,
        'output_file': None
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    i = 1
    while i < len(sys.argv):
        arg = sys.argv[i]
        
        if arg in ['-i', '--interactive']:
            args['interactive'] = True
        elif arg in ['-t', '--time', '--sort-time']:
            args['sort_by_time'] = True
        elif arg in ['--no-time']:
            args['sort_by_time'] = False
        elif arg in ['-m', '--markdown']:
            args['markdown_format'] = True
        elif arg in ['--no-markdown']:
            args['markdown_format'] = False
        elif arg in ['-s', '--structure']:
            args['show_structure'] = True
        elif arg in ['--no-structure']:
            args['show_structure'] = False
        elif not arg.startswith('-'):
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            if args['source_dir'] is None:
                args['source_dir'] = arg
            elif args['output_file'] is None:
                args['output_file'] = arg
        
        i += 1
    
    return args

def show_applied_flags(preferences, from_settings=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ —Ñ–ª–∞–≥–∏"""
    flags = []
    
    if preferences.get('sort_by_time', False):
        flags.append('-t')
    if preferences.get('markdown_format', False):
        flags.append('-m')
    if preferences.get('show_structure', False):
        flags.append('-s')
    
    if flags:
        flag_str = ' '.join(flags)
        source = "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" if from_settings else "CLI –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        print(f"üìã –ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ —Ñ–ª–∞–≥–∏: {flag_str} ({source})")
    else:
        print("üìã –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–∞—Ä—Å–∏–º CLI –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    cli_args = parse_arguments()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if cli_args['source_dir']:
        source_dir = cli_args['source_dir']
    else:
        source_dir = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π): ").strip()
        if not source_dir:
            source_dir = "."
    
    source_path = Path(source_dir)
    
    if not source_path.exists():
        print(f"–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {source_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return 1
    
    if not source_path.is_dir():
        print(f"–û—à–∏–±–∫–∞: {source_dir} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π!")
        return 1
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    project_settings = ProjectSettings(source_path)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    saved_settings = project_settings.load_settings()
    saved_preferences = {}
    
    if saved_settings:
        saved_preferences = saved_settings.get('preferences', {})
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{saved_settings.get('project_name', 'Unknown')}'")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: CLI —Ñ–ª–∞–≥–∏ > —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ > defaults
    final_preferences = {
        'interactive': cli_args['interactive'],  # interactive –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        'sort_by_time': cli_args['sort_by_time'] if 'sort_by_time' in sys.argv else saved_preferences.get('sort_by_time', False),
        'markdown_format': cli_args['markdown_format'] if any(arg in sys.argv for arg in ['-m', '--markdown', '--no-markdown']) else saved_preferences.get('markdown_format', False),
        'show_structure': cli_args['show_structure'] if any(arg in sys.argv for arg in ['-s', '--structure', '--no-structure']) else saved_preferences.get('show_structure', False)
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if cli_args['output_file']:
        output_file = cli_args['output_file']
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        default_output = saved_preferences.get('default_output')
        if not default_output:
            default_ext = ".md" if final_preferences['markdown_format'] else ".txt"
            default_output = f"collected_files{default_ext}"
        
        output_file = input(f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{default_output}'): ").strip()
        if not output_file:
            output_file = default_output
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ —Ñ–ª–∞–≥–∏
    show_applied_flags(final_preferences, bool(saved_settings))
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–ø—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if not final_preferences['interactive'] and '--interactive' not in sys.argv and '-i' not in sys.argv:
        choice = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤? (y/N): ").strip().lower()
        final_preferences['interactive'] = choice in ['y', 'yes', '–¥', '–¥–∞']
    
    # –ï—Å–ª–∏ —Ñ–ª–∞–≥–∏ –Ω–µ –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤ CLI –∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
    if not saved_settings:
        if 'sort_by_time' not in [arg.replace('--', '').replace('-', '_') for arg in sys.argv]:
            choice = input("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)? (y/N): ").strip().lower()
            final_preferences['sort_by_time'] = choice in ['y', 'yes', '–¥', '–¥–∞']
        
        if not any(arg in sys.argv for arg in ['-m', '--markdown', '--no-markdown']):
            choice = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown —Ñ–æ—Ä–º–∞—Ç? (y/N): ").strip().lower()
            final_preferences['markdown_format'] = choice in ['y', 'yes', '–¥', '–¥–∞']
            
            if final_preferences['markdown_format'] and not any(arg in sys.argv for arg in ['-s', '--structure', '--no-structure']):
                choice = input("–í–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞? (y/N): ").strip().lower()
                final_preferences['show_structure'] = choice in ['y', 'yes', '–¥', '–¥–∞']
    
    try:
        collect_files(
            source_dir, 
            output_file, 
            final_preferences['interactive'], 
            final_preferences['sort_by_time'], 
            final_preferences['markdown_format'], 
            final_preferences['show_structure'],
            project_settings
        )
        
        format_info = "Markdown" if final_preferences['markdown_format'] else "—Ç–µ–∫—Å—Ç–æ–≤–æ–º"
        structure_info = " —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π" if final_preferences['show_structure'] else ""
        print(f"\n–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {format_info} —Ñ–æ—Ä–º–∞—Ç–µ{structure_info}: {output_file}")
        return 0
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())