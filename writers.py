#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ö–ª–∞—Å—Å—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
OutputWriter - –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
MarkdownWriter - –≤—ã–≤–æ–¥ –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
TextWriter - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
"""

import datetime
from pathlib import Path
from typing import List, Dict
from abc import ABC, abstractmethod


class OutputWriter(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤ –≤—ã–≤–æ–¥–∞
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - root_path: Path - –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
    
    –ú–µ—Ç–æ–¥—ã:
    - write(files, output_file): –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤
    - _read_file_content(file_path) -> str: –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–æ–∫
    """
    
    def __init__(self, root_path: Path):
        self.root_path = root_path
    
    @abstractmethod
    def write(self, files: List[Path], output_file: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"""
        pass
    
    def _read_file_content(self, file_path: Path) -> str:
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–æ–∫"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        except UnicodeDecodeError:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
            try:
                with open(file_path, 'r', encoding='cp1251') as f:
                    return f.read()
            except Exception:
                return "[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞]\n"
        except Exception as e:
            return f"[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}]\n"


class MarkdownWriter(OutputWriter):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ
    –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - show_structure: bool - –≤–∫–ª—é—á–∞—Ç—å –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    
    –ú–µ—Ç–æ–¥—ã:
    - write(files, output_file): –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ
    - _write_header(out_f, files): –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - _write_structure(out_f, files): –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ –¥–µ—Ä–µ–≤–æ
    - _write_files(out_f, files): –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
    - _get_language_for_extension(extension) -> str: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    - _generate_project_structure(files) -> str: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    - _build_tree_text(node_dict, prefix, is_last) -> List[str]: –°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
    """
    
    def __init__(self, root_path: Path, show_structure: bool = False):
        super().__init__(root_path)
        self.show_structure = show_structure
    
    def write(self, files: List[Path], output_file: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ"""
        with open(output_file, 'w', encoding='utf-8') as out_f:
            self._write_header(out_f, files)
            
            if self.show_structure:
                self._write_structure(out_f, files)
            
            out_f.write("---\n\n")
            out_f.write("## üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤\n\n")
            
            self._write_files(out_f, files)
    
    def _write_header(self, out_f, files: List[Path]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Markdown"""
        project_name = self.root_path.name
        out_f.write(f"# CodeCollector - {project_name}\n\n")
        out_f.write(f"**–°–æ–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** {len(files)}  \n")
        out_f.write(f"**–î–∞—Ç–∞ —Å–±–æ—Ä–∞:** {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}  \n")
        out_f.write(f"**–ü—É—Ç—å:** `{self.root_path}`\n\n")
    
    def _write_structure(self, out_f, files: List[Path]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        out_f.write("## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n")
        structure = self._generate_project_structure(files)
        out_f.write("```\n")
        out_f.write(structure)
        out_f.write("```\n\n")
    
    def _write_files(self, out_f, files: List[Path]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤"""
        for file_path in sorted(files):
            try:
                rel_path = file_path.relative_to(self.root_path)
                out_f.write(f"### `{rel_path}`\n\n")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                lang = self._get_language_for_extension(file_path.suffix.lower())
                out_f.write(f"```{lang}\n")
                
                content = self._read_file_content(file_path)
                out_f.write(content)
                
                out_f.write("\n```\n\n")
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω: {rel_path}")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
                continue
    
    def _get_language_for_extension(self, extension: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞"""
        language_map = {
            '.py': 'python',
            '.php': 'php', 
            '.js': 'javascript',
            '.jsx': 'jsx',
            '.ts': 'typescript',
            '.tsx': 'tsx',
            '.html': 'html',
            '.css': 'css',
            '.scss': 'scss',
            '.sass': 'sass',
            '.less': 'less',
            '.sql': 'sql',
            '.json': 'json',
            '.xml': 'xml',
            '.yml': 'yaml',
            '.yaml': 'yaml',
            '.toml': 'toml',
            '.ini': 'ini',
            '.conf': 'apache',
            '.md': 'markdown',
            '.sh': 'bash',
            '.bash': 'bash',
            '.zsh': 'bash',
            '.fish': 'fish',
            '.bat': 'batch',
            '.cmd': 'batch',
            '.ps1': 'powershell',
            '.dockerfile': 'dockerfile',
            '.go': 'go',
            '.java': 'java',
            '.kt': 'kotlin',
            '.scala': 'scala',
            '.c': 'c',
            '.cpp': 'cpp',
            '.cxx': 'cpp',
            '.cc': 'cpp',
            '.h': 'c',
            '.hpp': 'cpp',
            '.cs': 'csharp',
            '.vb': 'vbnet',
            '.rb': 'ruby',
            '.rs': 'rust',
            '.swift': 'swift',
            '.dart': 'dart',
            '.lua': 'lua',
            '.perl': 'perl',
            '.pl': 'perl',
            '.r': 'r',
            '.matlab': 'matlab',
            '.vim': 'vim',
            '.vue': 'vue',
            '.svelte': 'svelte',
            '.astro': 'astro'
        }
        return language_map.get(extension, '')
    
    def _generate_project_structure(self, files: List[Path]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
        structure = {}
        
        for file_path in files:
            rel_path = file_path.relative_to(self.root_path)
            parts = rel_path.parts
            
            current = structure
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º –ø—É—Ç–∏
            for i, part in enumerate(parts):
                if part not in current:
                    is_file = i == len(parts) - 1
                    current[part] = {
                        '_is_file': is_file,
                        '_path': file_path if is_file else None
                    }
                    if not is_file:
                        current[part]['_children'] = {}
                
                if not current[part]['_is_file']:
                    current = current[part]['_children']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        tree_lines = [f"{self.root_path.name}/"]
        if structure:
            tree_lines.extend(self._build_tree_text(structure))
        
        return "\n".join(tree_lines)
    
    def _build_tree_text(self, node_dict: dict, prefix: str = "", is_last: bool = True) -> List[str]:
        """–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞"""
        result = []
        items = sorted(node_dict.items(), key=lambda x: (x[1]['_is_file'], x[0].lower()))
        
        for i, (name, info) in enumerate(items):
            is_last_item = i == len(items) - 1
            current_prefix = "‚îî‚îÄ‚îÄ " if is_last_item else "‚îú‚îÄ‚îÄ "
            
            if info['_is_file']:
                result.append(f"{prefix}{current_prefix}{name}")
            else:
                result.append(f"{prefix}{current_prefix}{name}/")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–π
                next_prefix = prefix + ("    " if is_last_item else "‚îÇ   ")
                children_text = self._build_tree_text(info['_children'], next_prefix, is_last_item)
                result.extend(children_text)
        
        return result


class TextWriter(OutputWriter):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    –ú–µ—Ç–æ–¥—ã:
    - write(files, output_file): –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    
    def write(self, files: List[Path], output_file: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        with open(output_file, 'w', encoding='utf-8') as out_f:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            project_name = self.root_path.name
            out_f.write(f"CodeCollector - {project_name}\n")
            out_f.write(f"–°–æ–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}\n")
            out_f.write(f"–î–∞—Ç–∞ —Å–±–æ—Ä–∞: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")
            out_f.write(f"–ü—É—Ç—å: {self.root_path}\n")
            out_f.write("=" * 80 + "\n\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            for file_path in sorted(files):
                try:
                    rel_path = file_path.relative_to(self.root_path)
                    out_f.write(f"# {rel_path}\n")
                    out_f.write("-" * 40 + "\n")
                    
                    content = self._read_file_content(file_path)
                    out_f.write(content)
                    out_f.write("\n\n")
                    
                    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω: {rel_path}")
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
                    continue