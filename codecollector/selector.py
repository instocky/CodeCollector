#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import os
from pathlib import Path
from typing import List, Tuple, Optional
from codecollector.models import TreeNode
from codecollector.utils import KeyboardHandler


class InteractiveSelector:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
    """
    
    def __init__(self, files: List[Path], root_path: Path, 
                 saved_files: Optional[List[Path]] = None, 
                 saved_folders: Optional[List[Path]] = None,
                 project_info: Optional[dict] = None):
        self.files = files
        self.root_path = root_path
        self.tree_root = self._build_file_tree()
        self.current_pos = 0
        self.page_size = 15  # –£–º–µ–Ω—å—à–∏–ª–∏ —á—Ç–æ–±—ã –≤–ª–µ–∑–∞–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.current_page = 0
        self.search_term = ""
        self.project_info = project_info or {}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if saved_files or saved_folders:
            self._apply_saved_selection(saved_files or [], saved_folders or [])
    
    def run(self) -> List[Path]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not self.files:
            print("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
            return []
        
        while True:
            self._display_tree()
            key = KeyboardHandler.get_key()
            
            if not self._handle_key(key):
                break
        
        return self.tree_root.get_selected_files()
    
    def _display_tree(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –ö–û–ù–¢–ï–ö–°–¢–ê"""
        os.system('cls' if os.name == 'nt' else 'clear')
        
        # –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê
        print("üöÄ CodeCollector")
        print("=" * 30)
        print(f"‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.root_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        if self.project_info:
            project_name = self.project_info.get('name', 'Unknown')
            project_settings = self.project_info.get('settings', '')
            print(f"üîÑ –ü—Ä–æ–µ–∫—Ç '{project_name}' | {project_settings}")
        
        print()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        
        visible_nodes = self._get_visible_nodes()
        
        if not visible_nodes:
            print("–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")
            return

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_files = self.tree_root.get_selected_files()
        total_files = self.tree_root.get_file_count()
        selected_files = len(all_files)
        
        total_pages = (len(visible_nodes) - 1) // self.page_size + 1 if visible_nodes else 1
        start_idx = self.current_page * self.page_size
        end_idx = min(start_idx + self.page_size, len(visible_nodes))
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —à–∞–ø–∫–∞ –¥–µ—Ä–µ–≤–∞
        print("‚ïî" + "‚ïê" * 80 + "‚ïó")
        print("‚ïë" + f"  –í–´–ë–û–† –§–ê–ô–õ–û–í ({selected_files}/{total_files} —Ñ–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ)".ljust(78) + "‚ïë")
        print("‚ïë" + f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.current_page + 1}/{total_pages}".ljust(78) + "‚ïë")
        print("‚ï†" + "‚ïê" * 80 + "‚ï£")
        print("‚ïë" + "  ‚Üë‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è, SPACE - –≤—ã–±–æ—Ä, ‚Üí‚Üê - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å".ljust(78) + "‚ïë")
        print("‚ïë" + "  A/N - –≤—Å—ë/–Ω–∏—á–µ–≥–æ, +/- - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ, R - —Å–±—Ä–æ—Å, Q - –≤—ã—Ö–æ–¥".ljust(78) + "‚ïë")
        print("‚ïö" + "‚ïê" * 80 + "‚ïù")
        print()

        if self.search_term:
            print(f"üîç –ü–æ–∏—Å–∫: '{self.search_term}' (ESC - –æ—á–∏—Å—Ç–∏—Ç—å)")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∑–ª—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i in range(start_idx, end_idx):
            if i >= len(visible_nodes):
                break
                
            node, depth = visible_nodes[i]
            cursor = "‚Üí" if i == self.current_pos else " "
            indent = "  " * depth
            
            if node.is_file:
                checkbox = "‚òë" if node.selected else "‚òê"
                name = node.get_display_name()
                max_name_len = 50 - len(indent)
                if len(name) > max_name_len:
                    name = name[:max_name_len-3] + "..."
                
                print(f"{cursor} {indent}üìÑ {checkbox} {name}")
            else:
                state = node.get_selection_state()
                if state == 'all':
                    checkbox = "‚òë"
                elif state == 'partial':
                    checkbox = "‚óë"
                else:
                    checkbox = "‚òê"
                
                expand_icon = "‚ñº" if node.expanded else "‚ñ∂"
                file_count = node.get_file_count()
                
                name = node.get_display_name()
                max_name_len = 35 - len(indent)
                if len(name) > max_name_len:
                    name = name[:max_name_len-3] + "..."
                
                print(f"{cursor} {indent}üìÅ {checkbox} {expand_icon} {name}/ ({file_count} —Ñ–∞–π–ª–æ–≤)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–∏–∑—É
        print(f"\n–í—ã–±—Ä–∞–Ω–æ: {selected_files} —Ñ–∞–π–ª–æ–≤")
        if self.current_pos < len(visible_nodes):
            current_node, _ = visible_nodes[self.current_pos]
            rel_path = current_node.path.relative_to(self.root_path)
            print(f"–¢–µ–∫—É—â–∏–π: {rel_path}")
    
    def _handle_key(self, key: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏—à–∏ R –¥–ª—è —Å–±—Ä–æ—Å–∞"""
        visible_nodes = self._get_visible_nodes()
        total_pages = (len(visible_nodes) - 1) // self.page_size + 1 if visible_nodes else 1
        
        if key == 'UP':
            if self.current_pos > 0:
                self.current_pos -= 1
                if self.current_pos < self.current_page * self.page_size:
                    self.current_page = max(0, self.current_page - 1)
        
        elif key == 'DOWN':
            if self.current_pos < len(visible_nodes) - 1:
                self.current_pos += 1
                if self.current_pos >= (self.current_page + 1) * self.page_size:
                    self.current_page = min(total_pages - 1, self.current_page + 1)
        
        elif key == 'SPACE':
            if self.current_pos < len(visible_nodes):
                current_node, _ = visible_nodes[self.current_pos]
                if current_node.is_file:
                    current_node.selected = not current_node.selected
                else:
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Å—é –ø–∞–ø–∫—É
                    state = current_node.get_selection_state()
                    new_state = state != 'all'
                    current_node.set_selected_recursive(new_state)
        
        elif key == 'RIGHT':
            if self.current_pos < len(visible_nodes):
                current_node, _ = visible_nodes[self.current_pos]
                if not current_node.is_file:
                    current_node.expanded = True
        
        elif key == 'LEFT':
            if self.current_pos < len(visible_nodes):
                current_node, _ = visible_nodes[self.current_pos]
                if not current_node.is_file:
                    current_node.expanded = False
        
        elif key == 'EXPAND':
            self._expand_all(self.tree_root)
        
        elif key == 'COLLAPSE':
            self._collapse_all(self.tree_root)
        
        elif key == 'ENTER':
            return False  # –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä
        
        elif key == 'QUIT':
            print("\n–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            self.tree_root.set_selected_recursive(False)
            return False
        
        elif key == 'ESC':
            if self.search_term:
                self.search_term = ""
            else:
                print("\n–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                self.tree_root.set_selected_recursive(False)
                return False
        
        elif key == 'ALL':
            self.tree_root.set_selected_recursive(True)
        
        elif key == 'NONE':
            self.tree_root.set_selected_recursive(False)
        
        elif key in ['r', 'R']:  # –ù–û–í–ê–Ø –ö–õ–ê–í–ò–®–ê - –°–ë–†–û–° –í–´–ë–û–†–ê
            self.tree_root.set_selected_recursive(False)
        
        elif key == 'FIND':
            print("\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ", end="", flush=True)
            self.search_term = input().strip()
        
        return True
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def _build_file_tree(self) -> TreeNode:
        """–°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π"""
        tree_root = TreeNode(self.root_path, is_file=False)
        tree_root.expanded = True
        
        for file_path in self.files:
            rel_path = file_path.relative_to(self.root_path)
            parts = rel_path.parts
            
            current_path = self.root_path
            current_node = tree_root
            
            for i, part in enumerate(parts[:-1]):
                current_path = current_path / part
                
                existing_dir = None
                for child in current_node.children:
                    if not child.is_file and child.path.name == part:
                        existing_dir = child
                        break
                
                if existing_dir is None:
                    dir_node = TreeNode(current_path, is_file=False, parent=current_node)
                    current_node.children.append(dir_node)
                    current_node = dir_node
                else:
                    current_node = existing_dir
            
            file_node = TreeNode(file_path, is_file=True, parent=current_node)
            current_node.children.append(file_node)
        
        self._sort_tree_children(tree_root)
        return tree_root
    
    def _sort_tree_children(self, node: TreeNode):
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–µ–π —É–∑–ª–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        if not node.is_file:
            node.children.sort(key=lambda x: (x.is_file, x.path.name.lower()))
            for child in node.children:
                self._sort_tree_children(child)
    
    def _apply_saved_selection(self, saved_files: List[Path], saved_folders: List[Path]):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∫ –¥–µ—Ä–µ–≤—É —Ñ–∞–π–ª–æ–≤"""
        saved_files_set = set(saved_files)
        saved_folders_set = set(saved_folders)
        
        def mark_selected(node):
            if node.is_file:
                if node.path in saved_files_set:
                    node.selected = True
            else:
                if node.path in saved_folders_set:
                    node.set_selected_recursive(True)
                else:
                    for child in node.children:
                        mark_selected(child)
        
        mark_selected(self.tree_root)
    
    def _get_visible_nodes(self) -> List[Tuple[TreeNode, int]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        visible = []
        
        def traverse(node, depth=0):
            if node != self.tree_root:
                visible.append((node, depth))
            
            if not node.is_file and node.expanded:
                for child in node.children:
                    traverse(child, depth + 1)
        
        traverse(self.tree_root)
        return visible
    
    def _expand_all(self, node: TreeNode):
        """–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        if not node.is_file:
            node.expanded = True
            for child in node.children:
                self._expand_all(child)
    
    def _collapse_all(self, node: TreeNode, depth: int = 0):
        """–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if not node.is_file:
            node.expanded = depth == 0
            for child in node.children:
                self._collapse_all(child, depth + 1)